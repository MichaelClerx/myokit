[[model]]
name: Baseline transmural ttp-2006 model
author: Michael Clerx
desc: """
    Baseline version of the 2006 model by ten Tusscher & Panfilov adapted for
    transmural strand simulations.
    
    Modifications:
        - Added l'hopital rule formulation for ical.ICaL to allow single
          precision calculations.
        - Doubled stimulus amplitude.

    
    """
# Initial values
membrane.V      = -8.53798558432631864e+01
calcium.Ca_i    =  1.05782268600543037e-04
calcium.Ca_sr   =  3.55567791655852350e+00
calcium.Ca_ss   =  2.14172873269809840e-04
calcium.R_prime =  9.89066126100902498e-01
sodium.Na_i     =  1.01338761744302950e+01
potassium.K_i   =  1.35368636336204105e+02
ikr.xr1         =  2.07650883539678194e-04
ikr.xr2         =  4.72733193318403078e-01
iks.xs          =  3.23090984071628057e-03
ina.m           =  1.66171456717857527e-03
ina.h           =  7.48991583078272738e-01
ina.j           =  7.48599753512242727e-01
ical.d          =  3.30548499869733964e-05
ical.f          =  9.77158843631106722e-01
ical.f2         =  9.99406290178190937e-01
ical.fCass      =  9.99972178434477055e-01
ito.s           =  9.99997904693742057e-01
ito.r           =  2.35709886030767176e-08


#
# Fast Sodium current INa
#
# Appendix to [3]
#
[ina]
use membrane.V
gNa = 14.838 [mS/uF]
INa = gNa * m ^ 3 * h * j * (V - rev.ENa)
    in [A/F]
dot(m) = (inf - m) / tau
    inf = 1 / (1 + exp((-56.86 - V) / 9.03)) ^ 2
    alpha = 1 / (1 + exp((-60 - V) / 5))
    beta = 0.1 / (1 + exp((V + 35) / 5)) + 0.1 / (1 + exp((V - 50) / 200))
    tau = alpha * beta
dot(h) = (inf - h) / tau
    inf = 1 / (1 + exp((V + 71.55) / 7.43)) ^ 2
    alpha = if(V < -40,
        0.057 * exp(-(V + 80) / 6.8),
        0)
    beta = if(V < -40,
        2.7 * exp(0.079 * V) + 310000 * exp(0.3485 * V),
        0.77 / (0.13 * (1 + exp((V + 10.66) / -11.1))))
    tau = 1 / (alpha + beta)
dot(j) = (inf - j) / tau
    inf = 1 / (1 + exp((V + 71.55) / 7.43)) ^ 2
    alpha = if(V < -40,
        (-25428 * exp(0.2444 * V) - 6.948e-6 * exp(-0.04391 * V)) * (V + 37.78) / 1 / (1 + exp(0.311 * (V + 79.23))),
        0)
    beta = if(V < -40,
        0.02424 * exp(-0.01052 * V) / (1 + exp(-0.1378 * (V + 40.14))),
        0.6 * exp(0.057 * V) / (1 + exp(-0.1 * (V + 32))))
    tau = 1 / (alpha + beta)

#
# Transient outward current ITo with voltage-shifted dynamics of activation and
# inactivation.
#
# Appendix to [2]
#
[ito]
use membrane.V
gTo = if(cell.type == 0, 0.073, 0.294)
    in [mS/uF]
ITo = gTo * r * s * (V - rev.EK)
    in [A/F]
dot(r) = (inf - r) / tau
    inf = 1 / (1 + exp((20 - V) / 6))
    tau = 9.5 * exp(-(V + 40) ^ 2 / 1800) + 0.8
dot(s) = (inf - s) / tau
    inf = if(cell.type == 0,
        1 / (1 + exp((V + 28) / 5)),
        1 / (1 + exp((V + 20) / 5)))
    tau = if(cell.type == 0,
        1000 * exp(-(V + 67) ^ 2 / 1000) + 8,
        85 * exp(-(V + 45) ^ 2 / 320) + 5 / (1 + exp((V - 20) / 5)) + 3)

#
# L-type calcium current
#
# Appendix to [2]
#
[ical]
use membrane.V
gCaL = 3.98e-5
# Adapted this using l'Hopitals rule for V = 15 
ICaL = if(abs(V - 15) < 1e-6,
        c1 * (c2 - c4) / c3,
        c1 * (V - 15) * (c2 * exp(c3 * (V - 15)) - c4) / (exp(c3 * (V - 15)) - 1))
    in [A/F]
    c1 = gCaL * d * f * f2 * fCass * 4 * phys.FFTR
    c2 = 0.25 * calcium.Ca_ss
    c3 = 2 * phys.FTR
    c4 = extra.Cao
dot(d) = (inf - d) / tau
    alpha = 1.4 / (1 + exp((-35 - V) / 13)) + 0.25
    beta  = 1.4 / (1 + exp((V + 5) / 5))
    gamma = 1 / (1 + exp((50 - V) / 20))
    tau = alpha * beta + gamma
    inf = 1 / (1 + exp((-8 - V) / 7.5))
dot(f2) = (inf - f2) / tau
    inf = 0.67 / (1 + exp((V + 35) / 7)) + 0.33
    tau = 562 * exp(-(V + 27) ^ 2 / 240) + 31 / (1 + exp((25 - V) / 10)) + 80 / (1 + exp((V + 30) / 10))
dot(fCass) = (inf - fCass) / tau
    inf = 0.6 / (1 + (calcium.Ca_ss / 0.05) ^ 2) + 0.4
    tau = 80 / (1 + (calcium.Ca_ss / 0.05) ^ 2) + 2
dot(f) = (inf - f) / tau
    inf = 1 / (1 + exp((V + 20) / 7))
    tau = 1102.5 * exp(-(V + 27) ^ 2 / 225) + 200 / (1 + exp((13 - V) / 10)) + 180 / (1 + exp((V + 30) / 10)) + 20
    
#
# External inputs
#
[engine]
pace = 0 bind pace
time = 0 bind time
    in [ms]    

#
# Cell type
#
# 0 : endocardial
# 1 : epicardial
# 2 : midmyocardial
#
[cell]
type = 1
    desc: The cell type

#
# Membrane potential
#
# Appendix to [3]
#
[membrane]
use stimulus.i_stim
dot(V) = -(i_ion + i_stim + i_diff)
    in [mV]
    label membrane_potential
i_ion = potassium.ItK + calcium.ItCa + sodium.ItNa
i_diff = 0
    bind diffusion_current
    in [A/F]

#
# Physical constants
#
# Appendix to [3]
#
[phys]
F =  96485.3415 [C/mmol]
R = 8314.472 [J/mol/K]
T = 310 [K]
RTF = R * T / F
FTR = F / (R * T)
FFTR = F * F / (R * T)
Cm = 0.185 [uF]
Vc = 0.016404 [um^3]

#
# Stimulus current
#
# Appendix to [3]
#
[stimulus]
i_stim = amplitude * engine.pace
    amplitude = -52 * 2 [A/F] # Increased, to pace fiber

#
# Reversal potentials
#
# Appendix to [3]
#
[rev]
use phys.RTF
use membrane.V
P_kna = 0.03
ECa = 0.5 * RTF * log(extra.Cao / calcium.Ca_i)
    in [mV]
EK = RTF * log(extra.Ko / potassium.K_i)
    in [mV]
EKs = RTF * log((extra.Ko + P_kna * extra.Nao) / (potassium.K_i + P_kna * sodium.Na_i))
    in [mV]
ENa = phys.RTF * log(extra.Nao / sodium.Na_i)
    in [mV]
    
#
# External concentrations
#
# Appendix to [3]
#
[extra]
Ko = 5.4 [mM]
Nao = 140.0 [mM]
Cao = 2 [mM]

#
# Background Calcium current ICaB
#
# Appendix to [3]
#
[icab]
use membrane.V
g_bca = 0.000592 [mS/uF]
ICaB = g_bca * (V - rev.ECa)
    in [A/F]

#
# Calcium pump IpCa
#
# Appendix to [3]
#
[ipca]
use calcium.Ca_i
K_pCa = 0.0005
    in [mM]
g_pCa = 0.1238
    in [A/F]
IpCa = g_pCa * Ca_i / (Ca_i + K_pCa)
    in [A/F]

#
# Inward rectifier Potassium current IK1
#
# Appendix to [3]
#
[ik1]
use rev.EK
use membrane.V
gK1 = 5.405 [mS/uF]
IK1 = gK1 * inf * sqrt(extra.Ko / 5.4) * (V - rev.EK)
    in [A/F]
inf = alpha / (alpha + beta)
    alpha = 0.1 / (1 + exp(0.06 * (V - EK - 200)))
    beta = (3.0 * exp(0.0002 * (V - EK + 100)) + exp(0.1 * (V - EK - 10))) / (1 + exp(-0.5 * (V - EK)))

#
# Potassium pump IpK
#
# Appendix to [3]
#
[ipk]
use membrane.V
gpK = 0.0146 [mS/uF]
IpK = gpK * (V - rev.EK) / (1 + exp((25 - V) / 5.98))
    in [A/F]

#
# Rapid time dependent Potassium current IKr
#
# Appendix to [3]
#
[ikr]
use membrane.V
use extra.Ko
gKr = 0.153 [mS/uF]
IKr = gKr * sqrt(Ko / 5.4) * xr1 * xr2 * (V - rev.EK)
    in [A/F]
dot(xr1) = (inf - xr1) / tau
    alpha = 450 / (1 + exp((-45 - V) / 10))    
    beta = 6 / (1 + exp((V + 30) / 11.5))
    tau = 1 * alpha * beta
    inf = 1 / (1 + exp((-26 - V) / 7))
dot(xr2) = (inf - xr2) / tau
    alpha = 3 / (1 + exp((-60 - V) / 20))
    beta = 1.12 / (1 + exp((V - 60) / 20))
    tau = 1 [ms] * alpha * beta
    inf = 1 / (1 + exp((V + 88) / 24))

#
# Slow time dependent Potassium current IKs
#
# Appendix to [2]
#
[iks]
use membrane.V
gKs = if(cell.type == 2, 0.098, 0.392)
IKs = gKs * xs * xs * (V - rev.EKs)
    in [A/F]
dot(xs) = (inf - xs) / tau
    alpha = 1400 / sqrt(1 + exp((5 - V) / 6))
    beta  = 1 / (1 + exp((V - 35) / 15))
    tau = 1 * alpha * beta + 80
    inf = 1 / (1 + exp((-5 - V) / 14))

#
# Background Sodium current INaB
#
# Appendix to [3]
#
[inab]
use membrane.V
gNaB = 0.00029 [mS/uF]
INaB = gNaB * (V - rev.ENa)
    in [A/F]

#
# Sodium-Calcium exchanger INaCa
#
# Appendix to [3]
#
[inaca]
use phys.FTR
use membrane.V
use sodium.Na_i, extra.Nao
use calcium.Ca_i, extra.Cao
K_NaCa = 1000 in [A/F]
K_sat = 0.1
Km_Ca = 1.38 in [mM]
Km_Nai = 87.5 in [mM]
a = 2.5
g = 0.35
Nao3 = Nao * Nao * Nao
Nai3 = Na_i * Na_i * Na_i
INaCa = K_NaCa * (exp(g * V * FTR) * Nai3 * Cao - exp((g - 1) * V * FTR) * Nao3 * Ca_i * a) / (
        (Km_Nai ^ 3 + Nao3) * (Km_Ca + Cao) * (1 + K_sat * exp((g - 1) * V * FTR)))
    in [A/F]

#
# Sodium-Potassium pump INaK
#
# Appendix to [3]
#
[inak]
use membrane.V
use extra.Ko
use sodium.Na_i
K_mNa = 40 [mM]
K_mk = 1 [mM]
P_NaK = 2.724 [A/F]
INaK = P_NaK * Ko / (Ko + K_mk) * Na_i / (Na_i + K_mNa) / (
        1 + 0.1245 * exp(-0.1 * V * phys.FTR) + 0.0353 * exp(-V * phys.FTR))
    in [A/F]

#
# Sodium dynamics
#
# Appendix to [3]
#
[sodium]
ItNa = ina.INa + inab.INaB + 3 * inak.INaK + 3 * inaca.INaCa
dot(Na_i) = -ItNa / (phys.Vc * phys.F) * phys.Cm
    in [mM]

#
# Potassium Dynamics
#
# Appendix to [3]
#
[potassium]
use membrane.V
ItK = ik1.IK1 + ito.ITo + ikr.IKr + iks.IKs + ipk.IpK - 2 * inak.INaK
dot(K_i) = -(ItK + stimulus.i_stim) / (phys.Vc * phys.F) * phys.Cm
    in [mM]

#
# Calcium dynamics
#
# Appendix to [2]
#
[calcium]
use membrane.V
ItCa = icab.ICaB + ipca.IpCa + ical.ICaL - 2 * inaca.INaCa
    desc: Total Calcium current
V_sr = 0.001094 [um^3]
dot(Ca_i) = Ca_i_bufc * ((i_leak - i_up) * V_sr / phys.Vc + i_xfer - (ItCa - ical.ICaL) * phys.Cm / (2 * phys.Vc * phys.F))
    in [mM]
    Ca_i_bufc = 1 / (1 + Buf_c * K_buf_c / (Ca_i + K_buf_c) ^ 2)
    Buf_c = 0.2 [mM]
    K_buf_c = 0.001 [mM]
dot(Ca_ss) = Ca_ss_bufss * (-ical.ICaL * phys.Cm / (2 * V_ss * phys.F) + i_rel * V_sr / V_ss - i_xfer * phys.Vc / V_ss)
    in [mM]
    Ca_ss_bufss = 1 / (1 + Buf_ss * K_buf_ss / (Ca_ss + K_buf_ss) ^ 2)
    Buf_ss = 0.4 [mM]
    K_buf_ss = 0.00025 [mM]
    V_ss = 5.468e-5 [um^3]
dot(Ca_sr) = Ca_sr_bufsr * (i_up - (i_rel + i_leak))
    in [mM]
    Ca_sr_bufsr = 1 / (1 + Buf_sr * K_buf_sr / (Ca_sr + K_buf_sr) ^ 2)
    Buf_sr = 10 [mM]
    K_buf_sr = 0.3 [mM]
K_up = 0.00025 [mM]
kcasr = max_sr - (max_sr - min_sr) / (1 + (EC / Ca_sr) ^ 2)
EC = 1.5 [mM]
max_sr = 2.5
min_sr = 1
O = k1 * Ca_ss ^ 2 * R_prime / (k3 + k1 * Ca_ss ^ 2)
    k1 = k1_prime / kcasr
    k1_prime = 0.15
    k3 = 0.06 [mS/uF]
dot(R_prime) = -k2 * Ca_ss * R_prime + k4 * (1 - R_prime)
    k2 = k2_prime * kcasr
    k2_prime = 0.045
    k4 = 0.005 [mS/uF]
i_leak = V_leak * (Ca_sr - Ca_i)
    V_leak = 0.00036 [mS/uF]
i_rel = V_rel * O * (Ca_sr - Ca_ss)
    V_rel = 0.102 [mS/uF]
i_up = Vmax_up / (1 + K_up ^ 2 / Ca_i ^ 2)
    Vmax_up = 0.006375 [mol/m^3/ms]
i_xfer = V_xfer * (Ca_ss - Ca_i)
    V_xfer = 0.0038 [mS/uF]

[[protocol]]
# Level  Start    Length   Period   Multiplier
1        2        3        400      0

[[script]]
import myokit


#
# NOT FOR DISTRIBUTION
# This is an updated TEST version of the example, it may leave out slow parts
# of the example, or contain developer comments
#


#
# This example simulates a transmural string of cells.
# A working OpenCL installation is required to run this example.
#
# This example has been tested with Myokit XXX
#

# Set the conductance value to obtain a realistic propagation time
g = 100

# Tissue dimensions
n_end = 6#60
n_mid = 4#45
n_epi = 6#60
n = n_end + n_mid + n_epi

# Get model and protocol, create simulation
m = get_model()
p = get_protocol()

# Create a multi-cell simulation
s = myokit.SimulationOpenCL(m, p, ncells=n)

# Configure the simulation
s.set_step_size(0.002)
s.set_paced_cells(3)
s.set_conductance(g)

# Add a scalar field representing different cell types (0:endo, 1:epi, 2:mid)
types = [0] * n_end + [2] * n_mid + [1] * n_epi
s.set_field('cell.type', types)

# Pre-pace for two beats
#s.pre(800)

# Run logged simulation for two beats
# OR ONE BEAT
d = s.run(20, log_interval=2, log=['engine.time', 'membrane.V'])

# Calculate conduction velocity
b = d.block1d()
cv = b.cv('membrane.V', length=0.0025)
#print('CV: ' + str(cv) + ' cm/s')

# Create quick plots of different cells' action potential
import matplotlib.pyplot as pl
pl.figure()
for n in [1, 7, 8, 14]:
    pl.plot(d['engine.time'], d['membrane.V', n])
pl.show()

