[[model]]
name: benson-2008-endo
author: Michael Clerx
desc: """
    Benson 2008 model for canine ventricular epicardial, mid-myocardial and
    endocardial myocytes.

    Adapted from CellML models. Original meta-data follows below:

    ---------------------------------------------------------------------------

    Catherine Lloyd
    Auckland Bioengineering Institute, The University of Auckland

    This CellML model represents the ventricular endocardial cell.  The model
    has been checked in both COR and PCEnv and it runs to recreate the
    published results.  The units have been checked and they balance. As with
    the CellML version of the Hund and Rudy 2004 model, on which this
    particular model is based, a stimulus protocol has been added to allow the
    model to simulate action potentials for 5 seconds. The parameter 'tissue'
    has been added to switch between the original (default value 0) and
    'tissue' (any other value, for example 1) models.

    ABSTRACT: We have constructed computational models of canine ventricular
    cells and tissues, ultimately combining detailed tissue architecture and
    heterogeneous transmural electrophysiology. The heterogeneity is introduced
    by modifying the Hund-Rudy canine cell model in order to reproduce
    experimentally reported electrophysiological properties of endocardial,
    midmyocardial (M) and epicardial cells. These models are validated against
    experimental data for individual ionic current and action potential
    characteristics, and their rate dependencies. 1D and 3D heterogeneous
    virtual tissues are constructed, with detailed tissue architecture
    (anisotropy and orthotropy, due to fibre orientation and sheet structure)
    of the left ventricular wall wedge extracted from a diffusion tensor
    imaging data set. The models are used to study the effects of tissue
    heterogeneity and class III drugs on transmural propagation and tissue
    vulnerability to re-entry. We have determined relationships between the
    transmural dispersion of action potential duration (APD) and the vulnerable
    window in the 1D virtual ventricular wall, and demonstrated how changes in
    the transmural heterogeneity, and hence tissue vulnerability, can lead to
    generation of re-entry in the 3D ventricular wedge. Two class III drugs
    with opposite qualitative effects on transmural APD heterogeneity are
    considered: d-sotalol that increases transmural APD dispersion, and
    amiodarone that decreases it. Simulations with the 1D virtual ventricular
    wall show that under d-sotalol conditions the vulnerable window is
    substantially wider compared to amiodarone conditions, primarily in the
    epicardial region where unidirectional conduction block persists until the
    adjacent M cells are fully repolarised. Further simulations with the 3D
    ventricular wedge have shown that ectopic stimulation of the epicardial
    region results in generation of sustained re-entry under d-sotalol
    conditions, but not under amiodarone conditions or in control. Again, APD
    increase in M cells was identified as the major contributor to tissue
    vulnerability--re-entry was initiated primarily due to ectopic excitation
    propagating around the unidirectional conduction block in the M cell
    region. This suggests an electrophysiological mechanism for the anti- and
    proarrhythmic effects of the class III drugs: the relative safety of
    amiodarone in comparison to d-sotalol can be explained by relatively low
    transmural APD dispersion, and hence, a narrow vulnerable window and low
    probability of re-entry in the tissue.

    The original paper reference is cited below:

    The canine virtual ventricular wall: a platform for dissecting
    pharmacological effects on propagation and arrhythmogenesis
    Alan P. Benson, Oleg V. Aslanidi, Henggui Zhang and Arun V. Holden, 2008
    Progress in Biophysics and Molecular Biology, 96, 187-208.
    PubMed ID: 17915298
    """
# Initial values
membrane.V     = -8.57818441071169957e+1
ina.h          =  9.87317750542999972e-1
ina.m          =  1.35653815900000003e-3
ina.j          =  9.91924983075999966e-1
ical.d         =  1.64012999999999996e-6
ical.dp        =  8.98230672627999915
ical.f         =  9.99961508634000018e-1
ical.f2        =  9.92234519147999983e-1
ical.fca       =  9.78366249230000040e-1
ical.fca2      =  8.93052931248999982e-1
ikr.xr         =  7.24074000000000024e-6
iks.xs1        =  1.98831381609999996e-2
iks.xs2        =  1.98906505540000014e-2
ito.ydv        =  1.39707867029999992e-2
ito.ydv2       =  9.99964727519999985e-1
ito.zdv        =  8.29206149767000023e-1
ito2.AA        =  8.16605172000000050e-4
inal.mL        =  1.35653815900000003e-3
inal.hL        =  2.61307117590000026e-1
irel.ro        =  0.0
irel.ri        =  8.62666650318000050e-1
irel.CaMKtrap  =  2.11237047739999996e-2
sodium.Na_i    =  1.29724333872689996e+1
potassium.K_i  =  1.35469546216758005e+2
chloride.Cl_i  =  1.55920715717800000e+1
calcium.Ca_i   =  1.21316659999999994e-4
calcium.Ca_ss  =  1.22712650000000005e-4
calcium.Ca_nsr =  1.83282233516799997
calcium.Ca_jsr =  1.73758099407100008

[engine]
time = 0 in [ms] bind time
pace = 0 bind pace

#
# Membrane potential
#
[membrane]
dot(V) = -(i_ion + i_diff)
    in [mV]
    label membrane_potential
i_diff = 0
    bind diffusion_current
    in [A/F]
i_ion = caiont + clont + kiont + naiont
    label cellular_current
    in [A/F]
caiont = ical.ical + icab.icab + ipca.ipca - 2 * inaca.inaca
    in [A/F]
clont = iclb.iclb + ito2.ito2 + 0.5 * stimulus.IStim
    in [A/F]
kiont = ikr.ikr + iks.iks + ik1.ik1 + ikp.ikp - 2 * inak.inak + ito.ito + 0.5 * stimulus.IStim
    in [A/F]
naiont = ina.ina + 3 * inaca.inaca + 3 * inak.inak + inal.inal
    in [A/F]

#
# Stimulus current
#
[stimulus]
IStim = engine.pace * stim_amplitude
    in [A/F]
stim_amplitude = -20
    in [A/F]

#
# Cell properties
#
[cell]
type = 2
    desc: Cell type (0: epi, 1: mid, 2: endo)
AF = Acap / phys.F
Acap = ageo * 2
    in [uF]
a = 0.0011 [cm]
l = 0.01 [cm]
ageo = 2 *  3.14159265358979312 * a * a + 2 *  3.14159265358979312 * a * l
    in [cm^2]
vcell = 1000 * 3.14159265358979312 * a * a * l
    in [mm^3]
vjsr = vcell * 0.0048
    in [mm^3]
vmyo = vcell * 0.68
    in [mm^3]
vnsr = vcell * 0.0552
    in [mm^3]
vss = vcell * 0.02
    in [mm^3]

#
# Calcium concentrations
#
[calcium]
BSLmax = 1.124 [mM]
BSRmax = 0.047 [mM]
dot(Ca_i) = bmyo * (-(icab.icab + ipca.ipca - 2 * inaca.inaca) * cell.AF / (cell.vmyo * 2) + (Iup_Ileak.ileak - Iup_Ileak.iup) * cell.vnsr / cell.vmyo + idiff * cell.vss / cell.vmyo)
    in [mM]
dot(Ca_jsr) = bcsqn * (itr - irel.irelcicr)
    in [mM]
dot(Ca_nsr) = Iup_Ileak.iup - itr * cell.vjsr / cell.vnsr - Iup_Ileak.ileak
    in [mM]
dot(Ca_ss) = bss * (-ical.ical * cell.AF / (cell.vss * 2) + irel.irelcicr * cell.vjsr / cell.vss - idiff)
    in [mM]
KmBSL = 0.0087 [mM]
KmBSR = 0.00087 [mM]
bcsqn = 1 / (1 + kmcsqn * csqnbar / (Ca_jsr + kmcsqn) ^ 2)
bmyo = 1 / (1 + cbar * kmc / (Ca_i + kmc) ^ 2 + kmt * tbar / (Ca_i + kmt) ^ 2)
bss = 1 / (1 + BSRmax * KmBSR / (KmBSR + Ca_ss) ^ 2 + BSLmax * KmBSL / (KmBSL + Ca_ss) ^ 2)
cbar = 0.05 [mM]
csqnbar = 10.0 [mM]
kmc = 0.00238 [mM]
kmcsqn = 0.8 [mM]
kmt = 0.0005 [mM]
tbar = 0.07 [mM]
idiff = (Ca_ss - Ca_i) / 0.2
    in [mM/ms]
itr = (Ca_nsr - Ca_jsr) / 120
    in [mM/ms]

#
# Chloride concentration
#
[chloride]
dot(Cl_i) = membrane.clont * cell.AF / cell.vmyo + sodium.CTNaCl + potassium.CTKCl
    in [mM]

#
# Physical constants
#
[phys]
F = 96485 [C/mol]
FRT = 3.74358835078e-2 [1/mV]

#
# External ionic concentrations
#
[ion]
Ca_o = 1.8 [mM]
Cl_o = 100 [mM]
K_o  = 5.4 [mM]
Na_o = 140 [mM]

#
# L-type calcium current
#
[ical]
use membrane.V
ical = d ^ dp * f * f2 * fca * fca2 * ibarca
    in [A/F]
    label L_type_calcium_current
ibarca = pca * 4 * (V - 15) * phys.F * phys.FRT * (gacai * calcium.Ca_ss * exp(2 * (V - 15) * phys.FRT) - gacao * ion.Ca_o) / (exp(2 * (V - 15) * phys.FRT) - 1)
    in [A/F]
gacai = 1.0
gacao = 0.341
pca = 0.000243
dot(d) = (dss - d) / taud
    dss = 1 / (1 + exp(-(V - 4) / 6.74))
    taud = 0.59 + 0.8 * exp(0.052 * (V + 13)) / (1 + exp(0.132 * (V + 13)))
dot(dp) = (dpss - dp) / 10
    dpss = 9 - 8 / (1 + exp(-(V + 65) / 3.4))
dot(f) = (fss - f) / tauf
    fss = 0.7 / (1 + exp((V + 17.12) / 7)) + 0.3
    tauf = 1 / (0.2411 * exp(-(0.045 * (V - 9.6914)) ^ 2) + 0.0529)
dot(f2) = (f2ss - f2) / tauf2
    f2ss = 0.77 / (1 + exp((V + 17.12) / 7)) + 0.23
    tauf2 = 1 / (0.0423 * exp(-(0.059 * (V - 18.5726)) ^ 2) + 0.0054)
dot(fca) = (fcass - fca) / taufca
    fcass = 0.3 / (1 - ical / 0.05) + 0.55 / (1 + calcium.Ca_ss / 0.003) + 0.15
    taufca = 10 * irel.CaMKactive / (0.15 + irel.CaMKactive) + 1 / (1 + calcium.Ca_ss / 0.003) + 0.5
dot(fca2) = (fca2ss - fca2) / taufca2
    fca2ss = 1 / (1 - ical / 0.01)
    taufca2 = 300 / (1 + exp((-ical - 0.175) / 0.04)) + 125

#
# Background calcium current
#
[icab]
use membrane.V, phys.F, phys.FRT, calcium.Ca_i, ion.Ca_o
icab =  1.995084e-7 * 4 * V * F * FRT * (Ca_i * exp(2 * V * FRT) - 0.341 * Ca_o) / (exp(2 * V * FRT) - 1)
    in [A/F]

#
# Background chloride current
#
[iclb]
use membrane.V
iclb = GClb * (membrane.V - rev.ECl)
    in [A/F]
GClb = 0.000225 [1/ms]

#
# Time-independent potassium current
#
[ik1]
use membrane.V
ik1 = 0.5 * sqrt(ion.K_o / 5.4) * ak1 / (ak1 + bk1) * (V - rev.EK)
    in [A/F]
    ak1 = 1.02 / (1 + exp(0.2385 * (V - rev.EK - 59.215)))
    bk1 = (0.49124 * exp(0.08032 * (V - rev.EK + 5.476)) + exp(0.06175 * (V - rev.EK - 594.31))) / (1 + exp(-0.5143 * (V - rev.EK + 4.753)))

#
# Plateau potassium current
#
[ikp]
use membrane.V
ikp = 0.00276 * (V - rev.EK) / (1 + exp((7.488 - V) / 5.98))
    in [A/F]

#
# Rapidly activating potassium current
#
[ikr]
use membrane.V
ikr = gkr * xr * r * (V - rev.EK)
    in [A/F]
gkr = 0.0138542 * sqrt(ion.K_o / 5.4)
    in [1/ms]
r = 1 / (1 + exp((V + 10) / 15.4))
dot(xr) = (xrss - xr) / tauxr
    xrss = 1 / (1 + exp(-(V + 10.085) / 4.25))
    tauxr = 1 / (0.0006 * (V - 1.7384) / (1 - exp(-0.136 * (V - 1.7384))) + 0.0003 * (V + 38.3608) / (exp(0.1522 * (V + 38.3608)) - 1))

#
# Slowly activating potassium current
#
[iks]
use membrane.V
iks = gks * xs1 * xs2 * (V - rev.EKs)
    in [A/F]
gks = gbar * (1 + 0.6 / (1 + (3.8e-05 / calcium.Ca_i) ^ 1.4))
    in [1/ms]
gbar = if(cell.type == 0, 0.0248975, if(cell.type == 1, 0.0074692, 0.0224077))
dot(xs1) = (xss - xs1) / tauxs
dot(xs2) = (xss - xs2) / tauxs / 2
tauxs = 1/ (7.61e-05 * (V + 44.6) / (1 - exp(-9.97 * (V + 44.6))) + 0.00036 * (V - 0.55) / (exp(0.128 * (V - 0.55)) - 1))
xss = 1 / (1 + exp(-(V - 10.5) / 24.7))

#
# Fast sodium current
#
[ina]
use membrane.V
ina = GNa * m * m * m * h * j * (V - rev.ENa)
    in [A/F]
GNa = 11.5
dot(m) = am * (1 - m) - bm * m
    am = 0.32 * 1* (V + 47.13) / (1 - exp(-0.1 * (V + 47.13)))
    bm = 0.08 * exp(-V / 11)
dot(h) = ah * (1 - h) - bh * h
    ah = piecewise(V >= -40, 0, 0.135 * exp((80 + V) / -6.8))
    bh = piecewise(V >= -40, 1/ (0.13 * (1 + exp((V + 10.66) / -11.1))), 3.56 * exp(0.079 * V) + 310000 * exp(0.35 * V))
dot(j) = aj * (1 - j) - bj * j
    aj = piecewise(V >= -40, 0, (-127140 * exp(0.2444 * V) - 3.474e-5 * exp(-0.04391 * V)) * 1* (V + 37.78) / (1 + exp(0.311 * (V + 79.23))))
    bj = piecewise(V >= -40, 0.3* exp(-2.535e-7 * V) / (1 + exp(-0.1* (V + 32))), 0.1212 * exp(-0.01052* V) / (1 + exp(-0.1378 * (V + 40.14))))

#
# Sodium-calcium exchanger
#
[inaca]
use membrane.V
inaca = NCXmax * allo * num / (denom1 * (denom2 + denom3))
    num = sodium.Na_i ^ 3 * ion.Ca_o * exp(eta * V * phys.FRT) - ion.Na_o ^ 3 * ca_i_NaCa * exp((eta - 1) * V * phys.FRT)
    denom1 = 1 + ksat * exp((eta - 1) * V * phys.FRT)
    denom2 = KmCao * sodium.Na_i ^ 3 + KmNao ^ 3 * ca_i_NaCa + KmNai ^ 3 * ion.Ca_o * (1 + ca_i_NaCa / KmCai)
    denom3 = KmCai * ion.Na_o ^ 3 * (1 + (sodium.Na_i / KmNai) ^ 3) + sodium.Na_i ^ 3 * ion.Ca_o + ion.Na_o ^ 3 * ca_i_NaCa
NCXmax = if(cell.type == 0, 4.5, if(cell.type == 1, 5.85, 4.05))
    in [A/F]
KmCa = 0.000125 [mM]
KmCai = 0.0036 [mM]
KmCao = 1.3 [mM]
KmNai = 12.3 [mM]
KmNao = 87.5 [mM]
allo = 1 / (1 + (KmCa / ca_i_NaCa) ^ 2)
ca_i_NaCa = 1.5 * calcium.Ca_i
eta = 0.35
ksat = 0.27

#
# Sodium-potassium pump
#
[inak]
use membrane.V
inak = ibarnak * fnak * 1 / (1 + (kmnai / sodium.Na_i) ^ 2) * ion.K_o / (ion.K_o + kmko)
    in [A/F]
fnak = 1 / (1 + 0.1245 * exp(-0.1 * V * phys.FRT) + 0.0365 * sigma * exp(-V * phys.FRT))
ibarnak = 0.61875 [A/F]
kmko = 1.5 [mM]
kmnai = 10 [mM]
sigma = (exp(ion.Na_o / 67.3) - 1) / 7

#
# Late sodium current
#
[inal]
use membrane.V
inal = GNaL * mL ^ 3 * hL * (V - rev.ENa)
    in [A/F]
GNaL = 0.0065 [1/ms]
dot(hL) = (hLss - hL) / 600
    hLss = 1 / (1 + exp((V + 91) / 6.1))
dot(mL) = amL * (1 - mL) - bmL * mL
    amL = 0.32 * 1* (V + 47.13) / (1 - exp(-0.1 * (V + 47.13)))
    bmL = 0.08 * exp(-V / 11)

#
# Sarcolemmal calcium pump
#
[ipca]
ipca = ibarpca * calcium.Ca_i / (kmpca + calcium.Ca_i)
    in [A/F]
ibarpca = 0.0575 [A/F]
kmpca = 0.0005 [mM]

#
# Calcium release current
#
[irel]
CaMK0 = 0.05
CaMKactive = CaMKbound + CaMKtrap
CaMKbound = CaMK0 * (1 - CaMKtrap) / (1 + Km / calcium.Ca_ss)
dot(CaMKtrap) = 0.05 * CaMKactive * (CaMKactive - CaMKtrap) - 0.00068 * CaMKtrap
Grel = 3000 * vg
    in [1/ms]
Km = 0.0015 [mM]
KmCaMK = 0.15
cafac = 1 / (1 + exp((ical.ical + 0.05) / 0.015))
irelcicr = Grel * ro * ri * (calcium.Ca_jsr - calcium.Ca_ss)
    in [mM/ms]
vg = 1 / (1 + exp((ical.ibarca + 13) / 5))
dot(ri) = (riss - ri) / tauri
    riss = 1 / (1 + exp((calcium.Ca_ss - 0.0004 + 0.002 * cafac) / 2.5e-5))
    tauri = 3 + dtau_rel + (350 - dtau_rel) / (1 + exp((calcium.Ca_ss - 0.003 + 0.003 * cafac) / 0.0002))
    dtau_rel = dtau_rel_max * CaMKactive / (KmCaMK + CaMKactive)
    dtau_rel_max = 10 [ms]
dot(ro) = (ross - ro) / 3
    ross = dro_inf / ((1 / ical.ical) ^ 2 + 1)
    dro_inf = calcium.Ca_jsr ^ 1.9 / (calcium.Ca_jsr ^ 1.9 + (49.28* calcium.Ca_ss / (calcium.Ca_ss + 0.0028)) ^ 1.9)

#
# Transient potassium current
#
[ito]
use membrane.V
ito = gitodv * ydv ^ 3 * ydv2 * zdv * rv * (V - rev.EK)
    in [A/F]
gitodv = if(cell.type == 0, 0.19, if(cell.type == 1, 0.1805, 0.095))
    in [1/ms]
rv = exp(V / 300)
dot(ydv) = ay * (1 - ydv) - by * ydv
    ay = 25 * exp((V - 40) / 25) / (1 + exp((V - 40) / 25))
    by = 25 * exp(-(V + 90) / 25) / (1 + exp(-(V + 90) / 25))
dot(ydv2) = ay2 * (1 - ydv2) - by2 * ydv2
    ay2 = 0.03 / (1 + exp((V + 60) / 5))
    by2 = 0.2 * exp((V + 25) / 5) / (1 + exp((V + 25) / 5))
dot(zdv) = ay3 * (1 - zdv) - by3 * zdv
    ay3 = a / (1 + exp((V + b) / 5))
        a = if(cell.type == 0, 0.0039, if(cell.type == 1, 0.00225, 0.0026))
        b = if(cell.type == 0, 63, if(cell.type == 1, 60, 61))
    by3 = 0.1 * exp((V + 25) / 5) / (1 + exp((V + 25) / 5))

#
# Transient chloride current
#
[ito2]
use membrane.V
dot(AA) = (AAss - AA)
    AAss = 1 / (1 + Kmto2 / calcium.Ca_ss)
ito2 = ito2_max * AA
    in [A/F]
ito2_max = PCl * V * phys.F * phys.FRT * (chloride.Cl_i - ion.Cl_o * exp(V * phys.FRT)) / (1 - exp(V * phys.FRT))
    in [A/F]
Kmto2 = 0.1502 [mM]
PCl = 4e-7

#
# Calcium leak and uptake
#
[Iup_Ileak]
Kmup = 0.00092 [mM]
dJup = dJupmax * irel.CaMKactive / (irel.KmCaMK + irel.CaMKactive)
dJupmax = 0.75
dKmPLB = dKmPLBmax * irel.CaMKactive / (irel.KmCaMK + irel.CaMKactive)
    in [mM]
dKmPLBmax = 0.00017 [mM]
ileak = iupmax * calcium.Ca_nsr / nsrmax
    in [mM/ms]
iup = (dJup + 1) * iupmax * calcium.Ca_i / (calcium.Ca_i + Kmup - dKmPLB)
    in [mM/ms]
iupmax = 0.004375 [mM/ms]
nsrmax = 15 [mM]

#
# Potassium concentration
#
[potassium]
dot(K_i) = -membrane.kiont * cell.AF / cell.vmyo + CTKCl
    in [mM]
CTKClmax =  7.0756e-6 [mM/ms]
CTKCl = CTKClmax * (rev.EK - rev.ECl) / (rev.EK - rev.ECl + 87.8251)
    in [mM/ms]

#
# Sodium concentration
#
[sodium]
dot(Na_i) = -membrane.naiont * cell.AF / cell.vmyo + CTNaCl
    in [mM]
CTNaClmax =  9.8443e-6 [mM/ms]
CTNaCl = CTNaClmax * (rev.ENa - rev.ECl) ^ 4 / ((rev.ENa - rev.ECl) ^ 4 + 87.8251 ^ 4)
    in [mM/ms]

#
# Reversal potentials
#
[rev]
ECl = -log(ion.Cl_o / chloride.Cl_i) / phys.FRT
    in [mV]
EK = log(ion.K_o / potassium.K_i) / phys.FRT
    in [mV]
EKs = log((ion.K_o + prnak * ion.Na_o) / (potassium.K_i + prnak * sodium.Na_i)) / phys.FRT
    in [mV]
ENa = log(ion.Na_o / sodium.Na_i) / phys.FRT
    in [mV]
prnak = 0.01833

[[protocol]]
# Level  Start    Length   Period   Multiplier
1.0      100.0    3.0      1000.0   0

[[script]]
import matplotlib.pyplot as pl
import myokit

# Get model and protocol, create simulation
m = get_model()
p = get_protocol()
s = myokit.Simulation(m, p)

types = {
    0: 'Epicardial',
    1: 'Mid-myocardial',
    2: 'Endocardial',
    }

# Run simulation for each cell type
pl.figure()
pl.xlabel('Time [ms]')
pl.ylabel('Vm [mV]')
for k, name in types.items():
    s.reset()
    s.set_constant('cell.type', k)
    s.pre(1000 * 50)
    d = s.run(1000, log=['engine.time', 'membrane.V'])
    pl.plot(d['engine.time'], d['membrane.V'], label=name)
pl.legend(loc='upper right')
pl.show()

