[[model]]
name: Clancy-1999-fitting
author: Michael Clerx
desc: """
Clancy 1999 SCN5A model suitable for parameter fitting.

Wild-type channel from Clancy 1999:

                     IF - IS
                   /  |
       C3 - C2 - C1 - O

[1] Linking a genetic defect to its cellular phenotype
    Colleen E. Clancy and Yoram Rudy
    1999, Nature

[2] http://www.cwru.edu/med/CBRTC/LRdOnline/markovina1999.htm 

Note: The equations given in "Box 1" of the Nature publication appear to be
      incorrect. The first equation is missing a "-", and alpha3 contains a
      term 3.7933e-9, which is 3.7933e-10 in the version published online.
       
Max conductance : 18.5 [mS/cm^2] 

Based on data from the following sources: 

[3] Multiple-mechanisms of Na+ channel-linked long-QT syndrome.
    Dumaine, et al.
    1996, Circulation Research
[4] Multiple effects of the KPQ deletion on gating of human cardiac Na+
    channels expressed in mammalian cells.
    Chandra, Starmer & Grant
    1998, Am. J. Physiol
[5] Molecular mechanism for an inherited cardiac arrhythmia.
    Bennett, Yazawa, Makita, George
    1995, Nature
     
The midpoints of activation and inactivation correspond to those given in [4].
"""
# Initial conditions
ina.C3 = 0.99
ina.C2 = 0.01
ina.C1 = 0  
ina.O  = 0  
ina.IF = 0  
ina.IS = 0 

#
# Simulation engine variables
#
[engine]
time = 0 bind time

#
# Membrane potential
#
[membrane]
V = -140
    label membrane_potential
    in [mV]

#
# Wild-type model from Clancy & Rudy 1999
# The equations were rewritten to have independent parameters. 
#
[ina]
desc:"""
Wild-type channel from Clancy 1999
The equations were rewritten to have independent parameters. 
"""
use membrane.V
p1 = 0.1027 / 3.802
p2 = 0.20 / 3.802
p3 = 0.23 / 3.802
p4 = 0.25 / 3.802
p5 = 1 / 17
p6 = 1 / 15
p7 = 1 / 12
p8 = 1 / 150
a11 = 1 / (p1 * exp(-V * p5) + p2 * exp(-V * p8))
a12 = 1 / (p1 * exp(-V * p6) + p3 * exp(-V * p8))
a13 = 1 / (p1 * exp(-V * p7) + p4 * exp(-V * p8))
q1 = 1 / 20.3
q2 = 0.1917
q3 = 0.2 * exp(5 / 20.3)
q4 = 0.22 * exp(10 / 20.3)
b11 = q2 * exp(-V * q1)
b12 = q3 * exp(-V * q1)
b13 = q4 * exp(-V * q1)
r1 = 9.178
r2 = 1 / 29.68
r3 = 3.7933e-10
r4 = 1 / 5.2
r5 = 0.0084
r6 = 0.00002
r7 = 1 / 100
a2 = r1 * exp(V * r2)
b2 = (a3 * a2 * a13) / (b3 * b13)
a3 = r3 * exp(-V * r4)
b3 = r5 + r6 * V
a4 = a2 * r7
b4 = a3
# Transition rates
dot(C3) = -C3 * (a11           ) + C2 * b11
dot(C2) = -C2 * (a12 + b11     ) + C1 * b12 + C3 * a11
dot(C1) = -C1 * (a13 + b12 + b3) + O  * b13 + C2 * a12 + IF * a3
dot(IF) = -IF * (a4  + b2  + a3) + IS * b4  + O  * a2  + C1 * b3
dot(IS) = -IS * (b4            ) + IF * a4
dot(O)  = -O  * (a2  + b13     ) + C1 * a13 + IF * b2
gmax = 18.5 [mS/cm^2]
E = 49 [mV]
i = gmax * O * (V - E)
    label fast_sodium_current
    in [pA/pF]



[[script]]
import numpy as np
import matplotlib.pyplot as pl
import myokit
import myokit.lib.fit as libfit
import myokit.lib.markov as libmarkov


#
# NOT FOR DISTRIBUTION
# This is an updated TEST version of the example, it may leave out slow parts
# of the example, or contain developer comments
#


#
# In this example, a particle search optimisation is used to find the values of
# two parameters of a Markov model of the fast sodium current.
# Please note that SymPy must be installed for this example to run, since this
# is used in the MarkovModel class.
#
# This example has been tested with Myokit XXX
#

#
# 1. Load a cell model, pre-condition it to close most sodium channels
#

# Load the cell model
model = get_model()

# Set a holding potential of -140mV and bring the sodium channels into a
# steady state. Update the model with this new state
v = model.label('membrane_potential')
v.set_rhs(-140)
s = myokit.Simulation(model)
s.run(30000)
model.set_state(s.state())

#
# 2. Extract a parametrisable Markov model
#

# Select the parameters we want to estimate
parameters = [
    'ina.p1',
    'ina.p2',
    ]

# Extract a markov model, parametrisable with p1 and p2
markov = libmarkov.MarkovModel.from_component(
    model.get('ina'),
    parameters=parameters,
    current='ina.i',
    )

#
# 3. Set up a patch clamp experiment and define a score function
#

# Create the step voltages
voltage_min  = -70
voltage_max  =  10
voltage_step =  10
voltages = np.arange(voltage_min, voltage_max + voltage_step, voltage_step)

# Create a series of points in time at which to evaluate the current.
# We'll use a fine sampling rate in the first few milliseconds, and a slower
#  rate in the next.
# Using a smaller number of time points at the less interesting times speeds up
#  the search without losing information.
times = np.concatenate((
    np.linspace(0, 1, 20),
    np.linspace(1, 4, 15),
    np.linspace(4, 30, 15)))

# Generate reference currents
references = []
for v in voltages:
    markov.set_membrane_potential(v)
    x, i = markov.solve(times)
    references.append(i)
    
# Define a function to optimize
# We create a function "score" that takes a set of parameters (a guess) as
#  input, calculates the resulting currents and compares them to the reference
#  traces using a sum-of-squares.
# If the guess is so wrong that we can't even calculate the currents, return
#  infinity. This would create problems for derivative based methods, but PSO
#  and GA can handle this very well.
def score(guess):
    try:
        error = 0
        markov.set_parameters(guess)
        for k, v in enumerate(voltages):
            markov.set_membrane_potential(v)
            x, i = markov.solve(times)
            r = references[k]
            error += np.sqrt(np.sum((i - r) ** 2))
        return error
    except Exception:
        return float('inf')


#
# 4. Run a global optimisation
#

# On Linux and OS X parameter fitting can be made faster using multiprocessing.
import platform
parallel = platform.system() != 'Windows'

# Set some (wide) boundaries for p1 and p2
boundaries = [
    [1e-3, 1e-1],
    [1e-3, 1e-1],
    ]

print('Running particle swarm optimisation...')
b = myokit.Benchmarker()
with np.errstate(all='ignore'):
    # Run the optimisation with 4 particles
    x, f = libfit.pso(score, boundaries, n=4, max_iter=50, parallel=parallel)
print(b.time())

# Get the real parameter values from the model for comparison
real = []
for p in parameters:
    real.append(model.get(p).eval())

# Show solution
print('Current solution:           Real values:')
for k, v in enumerate(x):
    print(myokit.strfloat(v) + '    ' + myokit.strfloat(real[k]))

# Refine the solution using the Nelder-nead local optimiser
x2, f2 = libfit.nelder_mead(score, x, max_iter=10)
print('Current solution:           Refined solution:')
for k, v in enumerate(x):
    print(myokit.strfloat(v) + '    ' + myokit.strfloat(x2[k]))
x, f = x2, f2

# Plot reference traces
pl.figure()
pl.subplot(2,1,1)
pl.title('Reference currents')
for c in references:
    pl.plot(times, c)
    
# Plot fitted traces
pl.subplot(2,1,2)
pl.title('Currents from fitted model')
markov.set_parameters(x)
for v in voltages:
    markov.set_membrane_potential(v)
    x, i = markov.solve(times)
    pl.plot(times, i)

#
# 5. Map the parameter space near the real coordinates
#
# Evaluate a grid of points in the search space
boundaries = [
    [0.01, 0.05],
    [0.02, 0.1],
    ]
#n = 50
n = 8
x, fx = libfit.map_grid(score, boundaries, n, parallel=parallel)
libfit.loss_surface_colors(x[:,0], x[:,1], fx, markers=None)
pl.title('Score function near the true solution')
pl.show()

