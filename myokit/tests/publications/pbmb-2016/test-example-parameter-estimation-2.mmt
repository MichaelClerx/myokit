[[model]]
name: Clancy-1999-fitting
author: Michael Clerx
desc: """
Clancy 1999 SCN5A model suitable for parameter fitting.

Wild-type channel from Clancy 1999:

                     IF - IS
                   /  |
       C3 - C2 - C1 - O

[1] Linking a genetic defect to its cellular phenotype
    Colleen E. Clancy and Yoram Rudy
    1999, Nature

[2] http://www.cwru.edu/med/CBRTC/LRdOnline/markovina1999.htm

Note: The equations given in "Box 1" of the Nature publication appear to be
      incorrect. The first equation is missing a "-", and alpha3 contains a
      term 3.7933e-9, which is 3.7933e-10 in the version published online.

Max conductance : 18.5 [mS/cm^2]

Based on data from the following sources:

[3] Multiple-mechanisms of Na+ channel-linked long-QT syndrome.
    Dumaine, et al.
    1996, Circulation Research
[4] Multiple effects of the KPQ deletion on gating of human cardiac Na+
    channels expressed in mammalian cells.
    Chandra, Starmer & Grant
    1998, Am. J. Physiol
[5] Molecular mechanism for an inherited cardiac arrhythmia.
    Bennett, Yazawa, Makita, George
    1995, Nature

The midpoints of activation and inactivation correspond to those given in [4].
"""
# Initial conditions
ina.C3 = 0.99
ina.C2 = 0.01
ina.C1 = 0
ina.O  = 0
ina.IF = 0
ina.IS = 0

#
# Simulation engine variables
#
[engine]
time = 0 bind time

#
# Membrane potential
#
[membrane]
V = -140
    label membrane_potential
    in [mV]

#
# Wild-type model from Clancy & Rudy 1999
# The equations were rewritten to have independent parameters.
#
[ina]
desc:"""
Wild-type channel from Clancy 1999
The equations were rewritten to have independent parameters.
"""
use membrane.V
p1 = 0.1027 / 3.802
p2 = 0.20 / 3.802
p3 = 0.23 / 3.802
p4 = 0.25 / 3.802
p5 = 1 / 17
p6 = 1 / 15
p7 = 1 / 12
p8 = 1 / 150
a11 = 1 / (p1 * exp(-V * p5) + p2 * exp(-V * p8))
a12 = 1 / (p1 * exp(-V * p6) + p3 * exp(-V * p8))
a13 = 1 / (p1 * exp(-V * p7) + p4 * exp(-V * p8))
q1 = 1 / 20.3
q2 = 0.1917
q3 = 0.2 * exp(5 / 20.3)
q4 = 0.22 * exp(10 / 20.3)
b11 = q2 * exp(-V * q1)
b12 = q3 * exp(-V * q1)
b13 = q4 * exp(-V * q1)
r1 = 9.178
r2 = 1 / 29.68
r3 = 3.7933e-10
r4 = 1 / 5.2
r5 = 0.0084
r6 = 0.00002
r7 = 1 / 100
a2 = r1 * exp(V * r2)
b2 = (a3 * a2 * a13) / (b3 * b13)
a3 = r3 * exp(-V * r4)
b3 = r5 + r6 * V
a4 = a2 * r7
b4 = a3
# Transition rates
dot(C3) = -C3 * (a11           ) + C2 * b11
dot(C2) = -C2 * (a12 + b11     ) + C1 * b12 + C3 * a11
dot(C1) = -C1 * (a13 + b12 + b3) + O  * b13 + C2 * a12 + IF * a3
dot(IF) = -IF * (a4  + b2  + a3) + IS * b4  + O  * a2  + C1 * b3
dot(IS) = -IS * (b4            ) + IF * a4
dot(O)  = -O  * (a2  + b13     ) + C1 * a13 + IF * b2
gmax = 18.5 [mS/cm^2]
E = 49 [mV]
i = gmax * O * (V - E)
    label fast_sodium_current
    in [pA/pF]

[[script]]
import myokit
import myokit.lib.fit as fit
import myokit.lib.markov as markov
import myokit.formats.axon as axon
import numpy as np
import matplotlib.pyplot as pl


#
# NOT FOR DISTRIBUTION
# This is an updated TEST version of the example, it may leave out slow parts
# of the example, or contain developer comments
#


#
# In this example, a particle search optimisation is used to fit a Markov
# model to a patch-clamp measurement of INa. This involves a number of
# pre-processing steps before the actual fitting begins.
#
# To simplify the example we only fit to an activation protocol. In a real
# application data from different protocols would be combined.
#
# Please note that SymPy must be installed for this example to run, since this
# is used in the MarkovModel class.
#
# This example has been tested with Myokit XXX
#

#
# 1. Load and pre-process the patch clamp data
#

# Load abf file with the patch-clamp data
abf = axon.AbfFile('test-example-parameter-estimation-2.abf')

# Show the raw data
# Leaving this out is slightly risky but speeds up tests....
#abf.matplotlib_figure()
#pl.show()

# Extract the voltages used in the step protocol
voltages = np.array(abf.protocol_steps()[0])

# Convert the abf data to a myokit.DataLog object
log = abf.extract_channel_as_myokit_log()

# Convert time from seconds to milliseconds
log['time'] *= 1e3

# Define a function to show the log's contents
def show(log):
    n = len(log) - 1
    pl.figure()
    for i in range(n):
        pl.plot(log['time'], log['sweep', i])
    #pl.show()

# Show converted data
#show(log)

# Count the number of sweeps (the number of steps applied)
n = len(log) - 1

# Select the data at the time the voltage step is applied
log = log.trim(15.635, 65, adjust=True)
#show(log)

# Apply leak correction by subtracting the mean of the signal's tails
tails = log.trim_left(20, adjust=True)
tails = tails.npview()
means = []
for i in range(n):
    means.append(np.mean(tails['sweep', i]))
means = np.array(means)
for i in range(n):
    log['sweep', i] = log['sweep', i] - means[i]
#show(log)

# Use the same time for every sweep
for i in range(n):
    sweep = log['sweep', i]
    log['sweep', i] = sweep[i:i-n]
time = log['time']
log['time'] = time[:-n]

# Trim the capacitance artefact
log = log.trim_left(0.5)
show(log)

#
# 2. Load a cell model and pre-condition it
#

# Load the channel model
model = get_model()

# Run a small simulation to bring the model closer to a steady-state for -120mV
vm = model.get('membrane.V')
vm.set_rhs(-120)
s = myokit.Simulation(model)
#s.pre(1000)
s.pre(10)
model.set_state(s.state())

#
# 3. Extract a parametrisable Markov model
#

# Select a number of states and the parameters we want to estimate
states = [
    'ina.C3',
    'ina.C2',
    'ina.C1',
    'ina.IF',
    'ina.IS',
    'ina.O',
    ]
parameters = [
    'ina.gmax',
    'ina.p1',
    'ina.p2',
    'ina.p3',
    'ina.p4',
    'ina.p5',
    'ina.p6',
    'ina.p7',
    'ina.p8',
    'ina.q1',
    'ina.q2',
    'ina.q3',
    'ina.q4',
    'ina.r1',
    'ina.r2',
    'ina.r3',
    'ina.r4',
    'ina.r5',
    'ina.r6',
    'ina.r7',
    ]

# Extract a linear, parametrisable model of the given states
linear = markov.MarkovModel(
    model,
    states,
    parameters,
    current='ina.i',
    vm='membrane.V',
    )

#
# 4. Set up a patch clamp experiment and define a score function
#

# Get reference traces
references = []
for i in range(n):
    references.append(log['sweep', i])

# Get the times to evaluate at
times = log['time']

# Define a score function
# In addition to estimating the parameters, we will estimate a small time-shift
# in the data. This compensates for the delay in membrane charging time (see
# Clerx et al. CINC 2015).
def score(guess):
    # The argument "guess" is a list containing the used time shift + a guess
    # at the parameters being estimated.
    try:
        error = 0
        for k, v in enumerate(voltages):
            linear.set_membrane_potential(v)
            linear.set_parameters(guess[1:])
            states, c = linear.solve(times - guess[0])
            r = references[k]
            rmax = np.max(np.abs(r))
            error += np.sqrt(np.sum(((c - r) / rmax) ** 2))
        return error / len(voltages)
    except Exception:
        return float('inf')

#
# 5. Run a global optimisation
#

# On Linux and OS X parameter fitting can be made faster using multiprocessing.
import platform
parallel = platform.system() != 'Windows'

# Define wide boundaries for each parameter
boundaries = {
    'ina.gmax' : [225, 1e5],
    'ina.p1' : [1e-5, 10],
    'ina.p2' : [1e-9, 10],
    'ina.p3' : [1e-4, 10],
    'ina.p4' : [1e-9, 10],
    'ina.p5' : [1e-4, 10],
    'ina.p6' : [1e-6, 10],
    'ina.p7' : [1e-4, 10],
    'ina.p8' : [1e-4, 10],
    'ina.q1' : [1e-4, 10],
    'ina.q2' : [1e-8, 10],
    'ina.q3' : [1e-4, 10],
    'ina.q4' : [1e-4, 10],
    'ina.r1' : [1, 100],
    'ina.r2' : [1e-3, 10],
    'ina.r3' : [1e-12, 1e-6],
    'ina.r4' : [1e-6, 10],
    'ina.r5' : [1e-3, 10],
    'ina.r6' : [1e-15, 10],
    'ina.r7' : [1e-15, 10],
    }
bounds = [[-1, 1]] # Time-shift
ps = iter(parameters)
for p in ps:
    bounds.append(boundaries[p])

# A "hint" can be given to the parameter estimation method. To make the example
# run quicker we have provided a hint based on an earlier optimization. To run
# a search from random positions within the boundaries, set use_guess=False
use_guess = True
hints = []
iterations=1000
if use_guess:
    iterations=5
    hints.append([
        1.708e-01,
        5.82e+02,
        4.89575005046099837e-04,
        1.92053671544540369e-03,
        1.16114168502740131e-01,
        3.34250200956101640e-01,
        1.20687771492932680e-01,
        2.55847399726507393e-04,
        2.01680066773134048e-01,
        3.52240726559600731e-02,
        8.17177944836075948e-02,
        4.24644658956014926e-04,
        2.30110624499844686e-02,
        1.39221485168018657e-03,
        1.30820605097661300e+01,
        3.45504268224579580e-02,
        9.50402758047540134e-07,
        9.10816595024319525e-02,
        3.50586063298659267e-01,
        7.95316842885630338e-04,
        4.34079274200588894e-02,
        ])

# Define an output function to provide some feedback during a long search.
def cb(pg, fg):
    print(fg)

# Find solution (ignore NumPy warnings)
with np.errstate(all='ignore'):
    # Global search
    print('Starting PSO global search')
    solution, f = fit.pso(
        score,
        bounds,
        hints=hints,
        n=4,
        r=0.5,
        parallel=parallel,
        max_iter=iterations,
        callback=cb)
    # Local refinement
    use_local_refinement = False
    if use_local_refinement:
        print('Starting Nelder-Mead local search')
        solution, f = fit.nelder_mead(
            score,
            solution,
            max_iter=25,
            )
        cb(solution, f)

# Show solution
for v in solution:
    print('   ' + myokit.strfloat(v) + ',')

# Plot reference traces
pl.figure()
for c in references:
    pl.plot(times, c)

# Plot fitted traces
for v in voltages:
    linear.set_membrane_potential(v)
    linear.set_parameters(solution[1:])
    states, c = linear.solve(times - solution[0])
    pl.plot(times, c, 'w-', lw=3)
pl.xlim(0.5, 5)
pl.show()

